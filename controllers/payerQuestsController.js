const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const crypto = require("crypto");
const axios = require("axios");

require("dotenv").config({ path: `.env.${process.env.NODE_ENV}` });

const redis = require("../index");
const PlayerQuest = require("../Schemas/playerQuests");

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
const User = require("../Schemas/user");  // ‡πÇ‡∏´‡∏•‡∏î User Schema
const Quest = require("../Schemas/Quests ");  // ‡πÇ‡∏´‡∏•‡∏î Quest Schema



const add_player_quest = async (req, res) => {
  try {
      console.log("Request Body:", req.body); // üü¢ Debug ‡πÄ‡∏ä‡πá‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤

      const { playerId, questId } = req.body;

      // üî¥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ playerId ‡πÅ‡∏•‡∏∞ questId ‡πÑ‡∏´‡∏°
      if (!playerId || !questId) {
          return res.status(400).json({ message: "playerId and questId are required" });
      }

      // üî¥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ playerId ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô User ‡πÑ‡∏´‡∏°
      const player = await User.findById(playerId);
      if (!player) {
          return res.status(404).json({ message: "Player not found" });
      }

      // üî¥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ questId ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Quest ‡πÑ‡∏´‡∏°
      const quest = await Quest.findById(questId);
      if (!quest) {
          return res.status(404).json({ message: "Quest not found" });
      }

      // üõë **‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ã‡πâ‡∏≥**
      const existingQuest = await PlayerQuest.findOne({ playerId, questId });
      if (existingQuest) {
          return res.status(400).json({ message: "Player already has this quest" });
      }

      // üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ status ‡πÄ‡∏õ‡πá‡∏ô "In Progress"
      const newPlayerQuest = new PlayerQuest({
          playerId,
          questId,
          status: "In Progress" // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status ‡πÄ‡∏õ‡πá‡∏ô "In Progress"
      });

      await newPlayerQuest.save();

      res.status(201).json({ message: "Player quest started successfully", playerQuest: newPlayerQuest });

  } catch (error) {
      res.status(500).json({ message: "Error adding player quest", error: error.message });
  }
};

  
const delete_player_quest = async (req, res) => {
  try {
      const { playerId, questId } = req.params;

      // üî¥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ playerId ‡πÅ‡∏•‡∏∞ questId ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!playerId || !questId) {
          return res.status(400).json({ message: "playerId and questId are required" });
      }

      // üõë **‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô**
      const deletedQuest = await PlayerQuest.findOneAndDelete({ playerId, questId });

      // üî¥ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏ô‡∏µ‡πâ
      if (!deletedQuest) {
          return res.status(404).json({ message: "Player quest not found" });
      }

      res.json({ message: "Player quest deleted successfully" });

  } catch (error) {
      res.status(500).json({ message: "Error deleting player quest", error: error.message });
  }
};

      

const edit_player_quest = async (req, res) => {
  try {
      const { playerId, questId } = req.params; // ‡∏£‡∏±‡∏ö playerId ‡πÅ‡∏•‡∏∞ questId ‡∏à‡∏≤‡∏Å URL
      const { status } = req.body; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ status ‡∏à‡∏≤‡∏Å body

      if (!playerId || !questId) {
          return res.status(400).json({ message: "playerId and questId are required" });
      }

      // üîç ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á playerId ‡πÅ‡∏•‡∏∞ questId
      const updatedQuest = await PlayerQuest.findOneAndUpdate(
          { playerId, questId }, // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
          { 
              status, 
              completedAt: status === "Completed" ? new Date() : null 
          },
          { new: true }
      );

      if (!updatedQuest) {
          return res.status(404).json({ message: "Player quest not found" });
      }

      res.json({ message: "Player quest updated successfully", playerQuest: updatedQuest });

  } catch (error) {
      console.error("‚ùå Error updating player quest:", error);
      res.status(500).json({ message: "Error updating player quest", error: error.message });
  }
};

      

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
const get_player_quests = async (req, res) => {
        try {
          const { playerId } = req.params;
      
          const playerQuests = await PlayerQuest.find({ playerId }).populate("questId");
          if (!playerQuests.length) return res.status(404).json({ message: "No quests found for this player" });
      
          res.json({ message: "Player quests fetched successfully", playerQuests });
        } catch (error) {
          res.status(500).json({ message: "Error fetching player quests", error });
        }
      };
      
const get_all_player_quests = async (req, res) => {
        try {
          const playerQuests = await PlayerQuest.find().populate("questId"); // ‡∏î‡∏∂‡∏á‡∏ó‡∏∏‡∏Å Quest ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
      
          if (!playerQuests.length) {
            return res.status(404).json({ message: "No player quests found" });
          }
      
          res.json({ message: "All player quests fetched successfully", playerQuests });
        } catch (error) {
          console.error("Error fetching all player quests:", error);
          res.status(500).json({ message: "Internal server error" });
        }
};
      

module.exports = { add_player_quest, delete_player_quest, edit_player_quest, get_player_quests,get_all_player_quests };

